version: "3.8"
services:
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      NODE_ENV: development
    develop:
      watch:
        - path: ./backend/package.json
          target: /app
          action: rebuild
        - path: ./backend/pnpm-lock.yaml
          target: /app
          action: rebuild
        - path: ./backend
          target: /app
          action: sync
    healthcheck:
      test: 'curl --fail --request POST --header ''content-type: application/json'' --url ''http://localhost:4000'' --data ''{"query":"query { __typename }"}'' || exit 1'
      retries: 10
    depends_on:
      db:
        condition: service_healthy

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    env_file: .env.dev
    environment:
      NODE_ENV: development
    develop:
      watch:
        - path: ./frontend/package.json
          target: /app
          action: rebuild
        - path: ./frontend/pnpm-lock.yaml
          target: /app
          action: rebuild
        - path: ./frontend/next.config.js
          target: /app
          action: rebuild
        - path: ./frontend
          target: /app
          action: sync
    depends_on:
      backend:
        condition: service_healthy

  db:
    image: postgres
    container_name: db
    restart: always
    environment:
      POSTGRES_PASSWORD: wildrent
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      retries: 10
    volumes:
      - pgdata_wildrent:/var/lib/postgresql/data

  e2e:
    build: ./e2e
    volumes:
      - ./e2e/playwright-report:/app/playwright-report
      - ./e2e/test-results:/app/test-results
    container_name: e2e
    depends_on:
      frontend:
        condition: service_healthy
    environment:
      NODE_ENV: test
    command: ["bash", "-c", "cd /tests && npm install && npm test"]
