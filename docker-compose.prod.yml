services:
  backend:
    image: wildrent9/wildrent-back
    # ports:
    #   - 4000:4000
    environment:
      - NODE_ENV=production
    volumes:
      - ./backend/src:/app/src
    healthcheck:
      test: 'curl --fail --request POST --header ''content-type: application/json'' --url ''http://localhost:4000'' --data ''{"query":"query { __typename }"}'' || exit 1'
      interval: 5s
      timeout: 5s
      retries: 10
    env_file:
      - .env.apikey
      - .env.prod
      - .env.dev
    depends_on:
      db:
        condition: service_healthy

  frontend:
    image: wildrent9/wildrent-front
    # restart: always
    environment:
      - NODE_ENV=production
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    env_file:
      - .env.prod
    # ports:
    #   - 3000:3000
    volumes:
      - ./frontend/src:/app/src
    depends_on:
      backend:
        condition: service_healthy

  db:
    image: postgres
    restart: always
    # ports:
    #   - "5434:5432"
    environment:
      POSTGRES_PASSWORD: wildrent
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20
    volumes:
      - pgdata_new1:/var/lib/postgresql/data

  imagesupload:
    image: imagesupload
    build:
      context: ./imagesupload
      dockerfile: Dockerfile.prod
    # build: ./imagesupload
    # image: wildrent9/wildrent-imagesupload
    volumes:
      # - ./imagesupload/src:/app/src
      - ./imagesupload/uploads:/app/uploads
    ports:
      - 8000:8000

  gateway:
    image: nginx
    depends_on:
      - backend
      - frontend
    restart: always
    # env_file: .env.prod
    ports:
      - ${GATEWAY_PORT:-7000}:80
      # - ${GATEWAY_PORT}:80
      # - 7000:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      # - pgdata_new1:/pgdata_new1
      - ./logs:/var/log/nginx

  adminer:
    image: adminer
    # ports:
    #   - 8080:8080

  redis:
    image: redis
  redis-commander:
    image: rediscommander/redis-commander
    environment:
      - REDIS_HOSTS=redis
    # ports:
    #   - "8081:8081"

volumes:
  pgdata_new1:
